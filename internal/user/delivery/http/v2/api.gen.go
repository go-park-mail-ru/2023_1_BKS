// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Удалить пользователя.
	// (DELETE /user)
	DeleteUser(ctx echo.Context) error
	// Вернуть данные пользователя.
	// (GET /user)
	GetUser(ctx echo.Context) error
	// Создать нового пользователя.
	// (POST /user)
	CreateUser(ctx echo.Context) error
	// Обновить пользователя.
	// (PUT /user)
	UpdateUser(ctx echo.Context) error
	// Вернуть пользователя по id.
	// (GET /user/{id})
	FindUserByID(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUser(ctx)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUser(ctx)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateUser(ctx)
	return err
}

// FindUserByID converts echo context to params.
func (w *ServerInterfaceWrapper) FindUserByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindUserByID(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/user", wrapper.DeleteUser)
	router.GET(baseURL+"/user", wrapper.GetUser)
	router.POST(baseURL+"/user", wrapper.CreateUser)
	router.PUT(baseURL+"/user", wrapper.UpdateUser)
	router.GET(baseURL+"/user/:id", wrapper.FindUserByID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXwW4bNxD9lQXb40JS4p725sRNK6BIDDQ+pT4wu5TEdpdkSK4LQxAQ24cGaAC3PRUo",
	"4KJoP0BxI0SNos0vDP+oGK62kqW1HRVOYAO5USR3+ObNvJlRn8QyU1IwYQ2J+sTEPZZRv7yrGbVsxzCN",
	"v2iaPuiQ6FGfKC0V05Yzf2tzj1rqbyTMxJory6UgEYGf4BSG7hCG7mkAb6GAiXsOr6CYbY9g4o4bJCR2",
	"XzESEWM1F10yCMnnGeXpqkG/vZ6le1wbe59mrAber/DGHa9n7ivZ5aLG1G9QwN8whul65rapMd9LndRY",
	"/B1ZK039P5t3eyz+rs6wN3sKI/cUXsMQjVcvHa/7ktVS8IzHNc+cuEP3A4zcgTuEUyjWtNyTgt3Ps8dM",
	"Xx3ZX7NYiuScXPgLhvAGxjCB8Xo0DEKi2ZOca5aQ6NEsc6tEOevJGQiLqbmQCMvx2x3soh60lvrLhw+3",
	"EflZ8cUyqfHHfxD4s5B0pM6oJRHhwm7cnrvAhWVdppGbjBlDu+caqo4v8372YHUdoX/B7IevH1es+vbW",
	"VUr+o2iW06a99a5KQTng11x05CqgB4qJTcWDjUYrgJe+oLkDX+hOYewOYBjkhmncG8I/mFfBplI7gj/x",
	"ELlNEeNsK/gmb7U2YsP0Ho9ZgDnsd1iwud0mIdlj2pSv3mq0Gi3kSiomqOIkIht+KySK2p5P8WZuqqik",
	"zHouUQEUgbcTEpEtv++VgtwYJYUp1XG79VlteyhWmH4euCN4CUOYuJ9h2kBICevQPLVloRCWCb+kSqU8",
	"9o83vzVSzLs+rj7VrEMi8klzPhY0ZzNBc16IfBhqW8sYYblnMMHmgosxvMBO0/BxN3mWUb2P1/8swcLY",
	"HV7Y5AYh6TK7yllVWlYIa12ZvwsDUJ3DJ/D6+tP8i1fA1B2VNCPnU5i6H2F0MedKmhrSFxgpRcyMvSOT",
	"/fdG+bxQWJ2zwUqwb9Wro8Yt1Ic7gLcwcs9gCgUWggJelYxc/zj+UYEt4zj1vmFRLy6JY14Txh2VXK8w",
	"fjDNvmNuQAEvZhzfkHJ68h/gSwvqICw7UrPPkwGCrK2v97hIkMY7+75BK6ppxizTxs9wZ8G2ty7s//in",
	"yXdDEhLhhwnCE7KcFeECbcsTw+57zJiqkayTLjNvj3BeuwnZsdQFzomVPwh40iifxOmnineuUxKRnrXK",
	"RM1mvyeNxUgOmjjyhGSPak4fp2VwqsOyNM9YIamMaYpHaHx38G8AAAD//31nO854EAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
