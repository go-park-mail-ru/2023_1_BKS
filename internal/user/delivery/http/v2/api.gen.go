// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Удалить пользователя.
	// (DELETE /user)
	DeleteUser(ctx echo.Context) error
	// Вернуть данные пользователя.
	// (GET /user)
	GetUser(ctx echo.Context) error
	// Создать нового пользователя.
	// (POST /user)
	CreateUser(ctx echo.Context) error
	// Обновить пользователя.
	// (PUT /user)
	UpdateUser(ctx echo.Context) error
	// Вернуть пользователя по id.
	// (GET /user/{id})
	FindUserByID(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUser(ctx)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUser(ctx)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateUser(ctx)
	return err
}

// FindUserByID converts echo context to params.
func (w *ServerInterfaceWrapper) FindUserByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindUserByID(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/user", wrapper.DeleteUser)
	router.GET(baseURL+"/user", wrapper.GetUser)
	router.POST(baseURL+"/user", wrapper.CreateUser)
	router.PUT(baseURL+"/user", wrapper.UpdateUser)
	router.GET(baseURL+"/user/:id", wrapper.FindUserByID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Gny18WcAAAD//5oSlVPKFAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
