// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Удалить пользователя.
	// (DELETE /api/user)
	DeleteUser(ctx echo.Context) error
	// Вернуть данные пользователя.
	// (GET /api/user)
	GetUser(ctx echo.Context) error
	// Создать нового пользователя.
	// (POST /api/user)
	CreateUser(ctx echo.Context) error
	// Обновить пользователя.
	// (PUT /api/user)
	UpdateUser(ctx echo.Context) error
	// Вернуть пользователя по id.
	// (GET /api/user/{id})
	FindUserByID(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUser(ctx)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUser(ctx)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateUser(ctx)
	return err
}

// FindUserByID converts echo context to params.
func (w *ServerInterfaceWrapper) FindUserByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindUserByID(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/api/user", wrapper.DeleteUser)
	router.GET(baseURL+"/api/user", wrapper.GetUser)
	router.POST(baseURL+"/api/user", wrapper.CreateUser)
	router.PUT(baseURL+"/api/user", wrapper.UpdateUser)
	router.GET(baseURL+"/api/user/:id", wrapper.FindUserByID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xX624TRxu+ldV8/PgqNraJAQlL/WFikq6p40Ac0hK7aLw7tifZEzOzcUxkiUOlIhWJ",
	"tr8qVaWqegOGYuESbG7h3TuqZtZb2/GSQ1WitP/WM5PnPTzPe8g+Mj3H91ziCo5y+4ibLeJg9bnECBZk",
	"gxMmf2HbLjdQbmsf+czzCROUqFf5XSywemERbjLqC+q5KIfgO3gFvfAx9MKHGryHERyEz+ANjMbHfTgI",
	"n6eQjkTHJyiHuGDUbaKujm44mNrzgOr4dEife03qJrj2E4zgdxjA8HRwq9ghCWg/wrvw+emQ1jDnbY9Z",
	"CWi/yIRFUH8Pc6lFzJ0kYAX7CvrhQ3gLPQkeWzqt9y3PJauBUydJvP8MI3gnrWgRCPTDr2EEw8jkSa10",
	"dcTI/YAyYqHc1lgTMaOzLoyJmcrq4WTosUpr3ZoUGGMe+6xSWZPez6rZ9KwEitUfaOpORw2POVigHKKu",
	"yC5OPKeuIE3CZIIcwjlufhAovj4u6LHB+Ll0fYWIsy9Io3Aua+jsVWgUPiS9GX0VueduknrF2yEJ3ae4",
	"WdFgACN4C30YIh2RPez4tjRLOsVWfcWkZVo0Nh4Yl1apwQ339hVzybhq7Phf3FkqXkuRTvGBtWnQMjX2",
	"StulzGrly2y5sNM2aJvWnWVxd1093sUrl5u3V67Z8hxvLmeMbW9vtXJjsbRdulIqGJ3GrdR6w765175d",
	"XC+RmzeXF29VLjfafokUG9mra+Wdq53inXvYusV5+4o5LXzs+zY1sYwnvd0WSEc+FoIwGd1X/9/CCw/y",
	"C3czC9fufVq7+Em1mjrmqFpdqFYvVqtpeXchkQROzIBR0VmX0ymSeZ1gRlg+EK3Jr+XYw+JmBenRLJNI",
	"0e0EuSWEj7oSmLoNb56isk/cvE+1bCqjwWvVIMNHqnG+gkH4CHpawAmTZz34Q1aUlvf9DZfeVxKiQpE5",
	"PtKqQSaTNTlhu9QkmqxedUK0/JqBdLRLGI+sXkplUhmpbM8nLvYpyqGsOlL5bamo09in6YDHkreJUNUk",
	"61/xYVgohwrqXPUJqV/uey6PkraYuZw4ckZz1fBMC5/Aa+jBQfg9DFPSLYs0cGCLqE26grjqc0YM3HMn",
	"S4T8usBIA+XQ/9KTLSM9XjHSkzasqEgcVwPpVvgUDmTdyo8BvJTTKzUjC9UFpwWxVevWdMQDx8GsI9F+",
	"i2KBQfj4yLna1VGTiPmUxn13Lp+ZfywdU+tWUj5ewNt/PQs/qBoahk8iFiQlQxiG30L/aEp8jydwMpWw",
	"qE0TLq57VuejMTIZBYIFpDunhUtHWW6LkxueGSCJtCQmS9Zs+AjeQz98CkMYyQY1gjdRns+reCbq+DV2",
	"NlLHUMUml4zRMeoIEsSx4VvnSxxn1ihOqA0Ywctxjv8bLf7FX/Ec2+S7+mSQpvep1ZVxJPb9ZepaMtPX",
	"O2r38zHDDhGEceXPbDxG4cjVUv4nqgY50pGrtmBELXRYOPpUZg/vQbWPKKp4wJ1GUeNon4TfyE32/DeY",
	"Q+PnA1ypC41aqcikXNxivgNmj7dHnkun91seF5LJrhSTXOUwo7huR+TEl9G+Nc4Ksj0T2/JKgte6fwYA",
	"AP//F1E4fH4RAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
