// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Вход в аккаунт.
	// (POST /api/auth/login)
	Login(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Login(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api/auth/login", wrapper.Login)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xUT08bRxT/KqtpDq2y7G5wgoSlHtwk0F1qDNjEbbAbjddje2C9M5kZYwyyBFStcqiE",
	"1GsPOfQLbGlQXRDuV3jzjaqZtSEJVLnkNDPvvXl/fu/33hGKWZ+zlKRKouIRknGP9LG9PheCiW9rtQ3z",
	"4IJxIhQlVhWzNjFnm8hYUK4oS1Ex/+BYnYs6TPSxQkVEU1VYRC5SI07yJ+kSgcYu6hMpcfd/Hc3VN1+l",
	"EjTtovHYRYK8HlBB2qi4g2YB5+bNsYsiydI6adXYHknvuo/qNQcmMIVLuIBr5CJygPs8MSHIKOq1VmNa",
	"oVG4fRg+WqehDNOtJ/HTcCnc49+/eBote2QUHbbrIa3Q8KC8Ww7Waz8UKs/2hiEd0lZ/Rb2sWuN9vPq4",
	"u7W6nBg5rq8E4S47WK89Xyzvlp+Un4WjzqZX7SRrB8OtqFoma2sri5u1x50hL5OoU1jaqOwtjaIXr3B7",
	"U8rhk/h9TDHnCY2xqcfflSxFLuJYKSJMeT9+uYMXDksLL4OF5VdfNx9+1Wh4nxA1GguNxsNGwze6B3cR",
	"d1GVdtNtbrDESVLpoOLOx5z4jnXpPWDD7zCFv2AC1959fjewlEMm2vd8fAuZPoYpXOlfvU+SII/+nr/m",
	"uGlsJIkHgqpR1fA6T7RFsCCiNFC929fKHNmoXkNuPgUmWq69jd5TiqOxcUzTDrubdIWTtMSpU/ACB97B",
	"lT5z9Alc6GM4h4k+gczhTCojy+AffQqZU+J8O6WvbYVUWRLORE5jEASFWBKxT2PimISthDiljRC5aJ8I",
	"mUd95AVeYNBknKSYU1REBSuytOjZqn3MqY8Hqucn80aZVMxpumi5FLZR8QZJgy6R6hvWHuUjnyqSWvs7",
	"7LvZG+b2QJAOKqIv/NvF4s+2ij9j0fjD7ikxIFYgOUtl3qTFIPhsUT/YBjb2R0z7Q5/Av3Ch38A1ZPrM",
	"gQzO9SlM9TFM4G/I9C8w0Wcesj87eJCoz5bb7ZK9L7G3dgBMDlP9Bq4gc+xlAn/CJWSenQI56PexGBnz",
	"3/TPMIV3DpybEi6Njf4JrvWpl3s3VCJC2uEdiGTGZ1n0/aMekyrFfTI2PDHkwoLiVpI3Y67M+T4DACUs",
	"xolRGefN8X8BAAD//4kg1CtKBgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
