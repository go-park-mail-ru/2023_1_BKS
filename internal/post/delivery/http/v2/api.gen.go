// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Вернуть объявления из корзины.
	// (GET /api/cart)
	GetCart(ctx echo.Context) error
	// Удалить из корзины товар.
	// (DELETE /api/cart/{id})
	RemoveCart(ctx echo.Context, id string) error
	// Добавить в корзину.
	// (POST /api/cart/{id})
	AddCart(ctx echo.Context, id string) error
	// Закрыть объявление.
	// (PUT /api/close/{userId}/{id})
	ClosePost(ctx echo.Context, userId string, id string) error
	// Вернуть избранное.
	// (GET /api/favorite)
	GetFavorite(ctx echo.Context) error
	// Удалить из избранных товар.
	// (DELETE /api/favorite/{id})
	RemoveFavorite(ctx echo.Context, id string) error
	// Добавить в избранное.
	// (POST /api/favorite/{id})
	AddFavorite(ctx echo.Context, id string) error
	// Создать новое объявление.
	// (POST /api/post)
	CreatePost(ctx echo.Context) error
	// Вернуть закрытые объявления по id пользователя.
	// (GET /api/post/close/user/{idUser}/{page})
	FindClosePostByUserID(ctx echo.Context, idUser string, page int) error
	// Вернуть открытые объявления по id пользователя.
	// (GET /api/post/open/user/{idUser}/{page})
	FindOpenPostByUserID(ctx echo.Context, idUser string, page int) error
	// Удалить объявление.
	// (DELETE /api/post/{id})
	DeletePost(ctx echo.Context, id string) error
	// Вернуть объявление по id.
	// (GET /api/post/{id})
	FindPostByID(ctx echo.Context, id string) error
	// Обновить объявление.
	// (PUT /api/post/{id})
	UpdatePost(ctx echo.Context, id string) error
	// Вернуть объявления по тегу.
	// (GET /api/post/{tag}/{page})
	FindPostByTag(ctx echo.Context, tag string, page int) error
	// Основнвая страница
	// (GET /api/sort/new/{page})
	GetAllPost(ctx echo.Context, page int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCart converts echo context to params.
func (w *ServerInterfaceWrapper) GetCart(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCart(ctx)
	return err
}

// RemoveCart converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveCart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RemoveCart(ctx, id)
	return err
}

// AddCart converts echo context to params.
func (w *ServerInterfaceWrapper) AddCart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddCart(ctx, id)
	return err
}

// ClosePost converts echo context to params.
func (w *ServerInterfaceWrapper) ClosePost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ClosePost(ctx, userId, id)
	return err
}

// GetFavorite converts echo context to params.
func (w *ServerInterfaceWrapper) GetFavorite(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFavorite(ctx)
	return err
}

// RemoveFavorite converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveFavorite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RemoveFavorite(ctx, id)
	return err
}

// AddFavorite converts echo context to params.
func (w *ServerInterfaceWrapper) AddFavorite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddFavorite(ctx, id)
	return err
}

// CreatePost converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePost(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePost(ctx)
	return err
}

// FindClosePostByUserID converts echo context to params.
func (w *ServerInterfaceWrapper) FindClosePostByUserID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "idUser" -------------
	var idUser string

	err = runtime.BindStyledParameterWithLocation("simple", false, "idUser", runtime.ParamLocationPath, ctx.Param("idUser"), &idUser)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idUser: %s", err))
	}

	// ------------- Path parameter "page" -------------
	var page int

	err = runtime.BindStyledParameterWithLocation("simple", false, "page", runtime.ParamLocationPath, ctx.Param("page"), &page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindClosePostByUserID(ctx, idUser, page)
	return err
}

// FindOpenPostByUserID converts echo context to params.
func (w *ServerInterfaceWrapper) FindOpenPostByUserID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "idUser" -------------
	var idUser string

	err = runtime.BindStyledParameterWithLocation("simple", false, "idUser", runtime.ParamLocationPath, ctx.Param("idUser"), &idUser)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idUser: %s", err))
	}

	// ------------- Path parameter "page" -------------
	var page int

	err = runtime.BindStyledParameterWithLocation("simple", false, "page", runtime.ParamLocationPath, ctx.Param("page"), &page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindOpenPostByUserID(ctx, idUser, page)
	return err
}

// DeletePost converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePost(ctx, id)
	return err
}

// FindPostByID converts echo context to params.
func (w *ServerInterfaceWrapper) FindPostByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPostByID(ctx, id)
	return err
}

// UpdatePost converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePost(ctx, id)
	return err
}

// FindPostByTag converts echo context to params.
func (w *ServerInterfaceWrapper) FindPostByTag(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tag" -------------
	var tag string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tag", runtime.ParamLocationPath, ctx.Param("tag"), &tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Path parameter "page" -------------
	var page int

	err = runtime.BindStyledParameterWithLocation("simple", false, "page", runtime.ParamLocationPath, ctx.Param("page"), &page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPostByTag(ctx, tag, page)
	return err
}

// GetAllPost converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllPost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "page" -------------
	var page int

	err = runtime.BindStyledParameterWithLocation("simple", false, "page", runtime.ParamLocationPath, ctx.Param("page"), &page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAllPost(ctx, page)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/cart", wrapper.GetCart)
	router.DELETE(baseURL+"/api/cart/:id", wrapper.RemoveCart)
	router.POST(baseURL+"/api/cart/:id", wrapper.AddCart)
	router.PUT(baseURL+"/api/close/:userId/:id", wrapper.ClosePost)
	router.GET(baseURL+"/api/favorite", wrapper.GetFavorite)
	router.DELETE(baseURL+"/api/favorite/:id", wrapper.RemoveFavorite)
	router.POST(baseURL+"/api/favorite/:id", wrapper.AddFavorite)
	router.POST(baseURL+"/api/post", wrapper.CreatePost)
	router.GET(baseURL+"/api/post/close/user/:idUser/:page", wrapper.FindClosePostByUserID)
	router.GET(baseURL+"/api/post/open/user/:idUser/:page", wrapper.FindOpenPostByUserID)
	router.DELETE(baseURL+"/api/post/:id", wrapper.DeletePost)
	router.GET(baseURL+"/api/post/:id", wrapper.FindPostByID)
	router.PUT(baseURL+"/api/post/:id", wrapper.UpdatePost)
	router.GET(baseURL+"/api/post/:tag/:page", wrapper.FindPostByTag)
	router.GET(baseURL+"/api/sort/new/:page", wrapper.GetAllPost)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"BPKCMvZqceUthf8FAAD//zYEcnx9LAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
