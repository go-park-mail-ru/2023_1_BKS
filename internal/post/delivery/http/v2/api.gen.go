// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Вернуть корзину товаров.
	// (GET /cart)
	GetShopingCart(ctx echo.Context) error
	// Добавить товар в корзину.
	// (POST /cart)
	AddCart(ctx echo.Context) error
	// Убрать товар из корзины.
	// (DELETE /cart/{id})
	RemoveCart(ctx echo.Context, id string) error
	// Закрыть объявление.
	// (PUT /close/{id})
	ClosePost(ctx echo.Context, id string) error
	// Вернуть посты авторизированного пользователя.
	// (GET /post)
	GetPost(ctx echo.Context) error
	// Создать новое объявление.
	// (POST /post)
	CreatePost(ctx echo.Context) error
	// Удалить объявление.
	// (DELETE /post/{id})
	DeletePost(ctx echo.Context, id string) error
	// Вернуть объявление по id.
	// (GET /post/{id})
	FindPostByID(ctx echo.Context, id string) error
	// Обновить объявление.
	// (PUT /post/{id})
	UpdatePost(ctx echo.Context, id string) error
	// Основнвая страница
	// (GET /sort/new/{post})
	GetAllPost(ctx echo.Context, post string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetShopingCart converts echo context to params.
func (w *ServerInterfaceWrapper) GetShopingCart(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetShopingCart(ctx)
	return err
}

// AddCart converts echo context to params.
func (w *ServerInterfaceWrapper) AddCart(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddCart(ctx)
	return err
}

// RemoveCart converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveCart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RemoveCart(ctx, id)
	return err
}

// ClosePost converts echo context to params.
func (w *ServerInterfaceWrapper) ClosePost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ClosePost(ctx, id)
	return err
}

// GetPost converts echo context to params.
func (w *ServerInterfaceWrapper) GetPost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPost(ctx)
	return err
}

// CreatePost converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePost(ctx)
	return err
}

// DeletePost converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePost(ctx, id)
	return err
}

// FindPostByID converts echo context to params.
func (w *ServerInterfaceWrapper) FindPostByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPostByID(ctx, id)
	return err
}

// UpdatePost converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePost(ctx, id)
	return err
}

// GetAllPost converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllPost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "post" -------------
	var post string

	err = runtime.BindStyledParameterWithLocation("simple", false, "post", runtime.ParamLocationPath, ctx.Param("post"), &post)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter post: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAllPost(ctx, post)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/cart", wrapper.GetShopingCart)
	router.POST(baseURL+"/cart", wrapper.AddCart)
	router.DELETE(baseURL+"/cart/:id", wrapper.RemoveCart)
	router.PUT(baseURL+"/close/:id", wrapper.ClosePost)
	router.GET(baseURL+"/post", wrapper.GetPost)
	router.POST(baseURL+"/post", wrapper.CreatePost)
	router.DELETE(baseURL+"/post/:id", wrapper.DeletePost)
	router.GET(baseURL+"/post/:id", wrapper.FindPostByID)
	router.PUT(baseURL+"/post/:id", wrapper.UpdatePost)
	router.GET(baseURL+"/sort/new/:post", wrapper.GetAllPost)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYzW7bRhB+FWLbI2EpcU+6OXF/fCgStMkp9WEjrm0WFLlZrlQYhgBJLtqgDiCkKNCi",
	"QBKkAXpmVClm7Ih+hdk3KmaWkiyJUhwjbeUiJ4n7OzPfN98MecCqUU1GoQh1zCoHLK7uiRqnv58qFakv",
	"7ty5jQ9SRVIo7QuaqkaewF9PxFXlS+1HIavYDQ7NuWwnUjWuWYX5oV6/zlym96Wwj2JXKNZ0WU3EMd9d",
	"eNBoerw11soPd1mz6TIlHtR9JTxWucfyC0fLt5su26rxXfElj2O/Qcf7WtTI8CgUt3ZY5d6sQ7Rh3hD4",
	"DY4hg5emBQm8ggEMIYWBQ0M/mS704NQOmu7aW+20d2w30cB8JVeK72Mobkexxut5EBTadzOI4iL7foUE",
	"TkzLHJkOZA6cQlpgHAzOGXc/igLBQ7x08/xZc0c/hwz6MDAteAXJuzk+D8DHSuywCvuoNGFbKadaaWot",
	"xkL51SJf/6Qbk4sbccfXQdFBTyCBY+hZr0z3knDa06ejODLezQGbCYTFHrHe8pahbWfnqNhH40wHUvM9",
	"pHACCYJuWpelo0f24LAf7kTzN96SItyQvrO+VnagD6em65g2EaIHqWlD4sgo1jiWwGvTgcTZkPJu6D+g",
	"u23sWT7kfFMvl9ersVANvyocDAGNCGfj9hZzWUOo2N56ba28Vkb0IilCLn1WYes05DLJ9R7Fp1TlitJl",
	"V9APxo6j1Rg49rnQX+9F0g93b+Iy9DqWURjb2F4vl62ChVqENuekDPwq7S99G9tcsNxcIB3LyJyDW5Dk",
	"GOgZSH9H+OAYUsvrM8jg1ByaHy3R1xjt2OH1QL+Tycvsm4h6kUHPTAsySFH0zEM4pWQzDyGFl0i3NeJQ",
	"XK/VuNrH5T8TG4bm0HTMIwdOJu6YQwfJiUlGR/bIGZmr3DReG543BupBXcT6RuTtvzeHR4BM01+rumjO",
	"MeNaQdr9MfLCMYemDWcwMA9hiGLbx7wjGcnzbvUB+4VMTiiBEbIJRg70ZgC0mynVSge+17SxCYQW8xB+",
	"JWpRQ+QoSq54TWihYsqWaYu3NhfKlY/zmOPMZSGvUbPgsVnU3HNxmxW47TlEPylA9Ol8fXTMIfQhyQey",
	"1Qfyhe1J5kBM4XgaxqMRjFiPxjjKekEeUsmiRmS1MCy/Vy0ojH4xJabTHTNnSJG+Miw51x2iPhc2hsSO",
	"kTAvqqc5K/7tQnrBMlqE3kwxza5cMT2DzLRNxxw5qNe206PDUltQqXtFPv6F5LTePqK3lR41hgNs2JZU",
	"3ZtKcC3GwP4zhffyZfcCGWnakMEx6faVAPj5yFwLsNWSrPCtaiox31p9N2l8BZW7qPo+K2Tqo3EFNo+v",
	"QiP1Im8X0mXK6hbr6Wd+6CFYN/a3Nj+U2v+FWGcLnHJ8z0pwUb91V3p8VdL2v5T/D/3dZVn4dGxy+rYO",
	"L46ULoXiu9IBlpTmsmZvIwguQkp4Ahm8wTwYNytobw9N7mBtNi36VjXdrbx24CX0XVo0qYHUw5w49gza",
	"8QZfQAvpLScty1WSOdOdkTl6NXMXVMnH5sh+zD3DaJg2vKGotuisITaFPdNe+EF25Xlr2jn0Q+oBuoQ8",
	"fWRHD36AxN4SC9UYka+uAlZhe1rLuFIqHexFsUZCNEtc+sxlDa58fj+wCI8mbWDzQLAgqvJgLwdsu/l3",
	"AAAA//9GGotC+hgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
