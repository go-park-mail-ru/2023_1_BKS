// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Вернуть объявления из корзины.
	// (GET /api/cart)
	GetCart(ctx echo.Context) error
	// Удалить из корзины товар.
	// (DELETE /api/cart/{id})
	RemoveCart(ctx echo.Context, id string) error
	// Добавить в корзину.
	// (POST /api/cart/{id})
	AddCart(ctx echo.Context, id string) error
	// Закрыть объявление.
	// (PUT /api/close/{userId}/{id})
	ClosePost(ctx echo.Context, userId string, id string) error
	// Вернуть избранное.
	// (GET /api/favorite)
	GetFavorite(ctx echo.Context) error
	// Удалить из избранных товар.
	// (DELETE /api/favorite/{id})
	RemoveFavorite(ctx echo.Context, id string) error
	// Добавить в избранное.
	// (POST /api/favorite/{id})
	AddFavorite(ctx echo.Context, id string) error
	// Создать новое объявление.
	// (POST /api/post)
	CreatePost(ctx echo.Context) error
	// Вернуть закрытые объявления по id пользователя.
	// (GET /api/post/close/user/{idUser}/{page})
	FindClosePostByUserID(ctx echo.Context, idUser string, page int) error
	// Вернуть открытые объявления по id пользователя.
	// (GET /api/post/open/user/{idUser}/{page})
	FindOpenPostByUserID(ctx echo.Context, idUser string, page int) error
	// Удалить объявление.
	// (DELETE /api/post/{id})
	DeletePost(ctx echo.Context, id string) error
	// Вернуть объявление по id.
	// (GET /api/post/{id})
	FindPostByID(ctx echo.Context, id string) error
	// Обновить объявление.
	// (PUT /api/post/{id})
	UpdatePost(ctx echo.Context, id string) error
	// Вернуть объявления по тегу.
	// (GET /api/post/{tag}/{page})
	FindPostByTag(ctx echo.Context, tag string, page int) error
	// Поиск.
	// (POST /api/search)
	Search(ctx echo.Context, params SearchParams) error
	// Основнвая страница
	// (GET /api/sort/new/{page})
	GetAllPost(ctx echo.Context, page int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCart converts echo context to params.
func (w *ServerInterfaceWrapper) GetCart(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCart(ctx)
	return err
}

// RemoveCart converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveCart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RemoveCart(ctx, id)
	return err
}

// AddCart converts echo context to params.
func (w *ServerInterfaceWrapper) AddCart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddCart(ctx, id)
	return err
}

// ClosePost converts echo context to params.
func (w *ServerInterfaceWrapper) ClosePost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ClosePost(ctx, userId, id)
	return err
}

// GetFavorite converts echo context to params.
func (w *ServerInterfaceWrapper) GetFavorite(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFavorite(ctx)
	return err
}

// RemoveFavorite converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveFavorite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RemoveFavorite(ctx, id)
	return err
}

// AddFavorite converts echo context to params.
func (w *ServerInterfaceWrapper) AddFavorite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddFavorite(ctx, id)
	return err
}

// CreatePost converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePost(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePost(ctx)
	return err
}

// FindClosePostByUserID converts echo context to params.
func (w *ServerInterfaceWrapper) FindClosePostByUserID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "idUser" -------------
	var idUser string

	err = runtime.BindStyledParameterWithLocation("simple", false, "idUser", runtime.ParamLocationPath, ctx.Param("idUser"), &idUser)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idUser: %s", err))
	}

	// ------------- Path parameter "page" -------------
	var page int

	err = runtime.BindStyledParameterWithLocation("simple", false, "page", runtime.ParamLocationPath, ctx.Param("page"), &page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindClosePostByUserID(ctx, idUser, page)
	return err
}

// FindOpenPostByUserID converts echo context to params.
func (w *ServerInterfaceWrapper) FindOpenPostByUserID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "idUser" -------------
	var idUser string

	err = runtime.BindStyledParameterWithLocation("simple", false, "idUser", runtime.ParamLocationPath, ctx.Param("idUser"), &idUser)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idUser: %s", err))
	}

	// ------------- Path parameter "page" -------------
	var page int

	err = runtime.BindStyledParameterWithLocation("simple", false, "page", runtime.ParamLocationPath, ctx.Param("page"), &page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindOpenPostByUserID(ctx, idUser, page)
	return err
}

// DeletePost converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePost(ctx, id)
	return err
}

// FindPostByID converts echo context to params.
func (w *ServerInterfaceWrapper) FindPostByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPostByID(ctx, id)
	return err
}

// UpdatePost converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePost(ctx, id)
	return err
}

// FindPostByTag converts echo context to params.
func (w *ServerInterfaceWrapper) FindPostByTag(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tag" -------------
	var tag string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tag", runtime.ParamLocationPath, ctx.Param("tag"), &tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Path parameter "page" -------------
	var page int

	err = runtime.BindStyledParameterWithLocation("simple", false, "page", runtime.ParamLocationPath, ctx.Param("page"), &page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPostByTag(ctx, tag, page)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Required query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, true, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// GetAllPost converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllPost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "page" -------------
	var page int

	err = runtime.BindStyledParameterWithLocation("simple", false, "page", runtime.ParamLocationPath, ctx.Param("page"), &page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAllPost(ctx, page)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/cart", wrapper.GetCart)
	router.DELETE(baseURL+"/api/cart/:id", wrapper.RemoveCart)
	router.POST(baseURL+"/api/cart/:id", wrapper.AddCart)
	router.PUT(baseURL+"/api/close/:userId/:id", wrapper.ClosePost)
	router.GET(baseURL+"/api/favorite", wrapper.GetFavorite)
	router.DELETE(baseURL+"/api/favorite/:id", wrapper.RemoveFavorite)
	router.POST(baseURL+"/api/favorite/:id", wrapper.AddFavorite)
	router.POST(baseURL+"/api/post", wrapper.CreatePost)
	router.GET(baseURL+"/api/post/close/user/:idUser/:page", wrapper.FindClosePostByUserID)
	router.GET(baseURL+"/api/post/open/user/:idUser/:page", wrapper.FindOpenPostByUserID)
	router.DELETE(baseURL+"/api/post/:id", wrapper.DeletePost)
	router.GET(baseURL+"/api/post/:id", wrapper.FindPostByID)
	router.PUT(baseURL+"/api/post/:id", wrapper.UpdatePost)
	router.GET(baseURL+"/api/post/:tag/:page", wrapper.FindPostByTag)
	router.POST(baseURL+"/api/search", wrapper.Search)
	router.GET(baseURL+"/api/sort/new/:page", wrapper.GetAllPost)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"0kXF/y8AAP//QNebWUouAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
