// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Закрыть объявление.
	// (PUT /api/close/{id})
	ClosePost(ctx echo.Context, id string) error
	// Создать новое объявление.
	// (POST /api/post)
	CreatePost(ctx echo.Context) error
	// Вернуть объявления по id пользователя.
	// (GET /api/post/user/{idUser}/{page})
	FindPostByUserID(ctx echo.Context, idUser string, page int) error
	// Удалить объявление.
	// (DELETE /api/post/{id})
	DeletePost(ctx echo.Context, id string) error
	// Вернуть объявление по id.
	// (GET /api/post/{id})
	FindPostByID(ctx echo.Context, id string) error
	// Обновить объявление.
	// (PUT /api/post/{id})
	UpdatePost(ctx echo.Context, id string) error
	// Основнвая страница
	// (GET /api/sort/new/{page})
	GetAllPost(ctx echo.Context, page int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ClosePost converts echo context to params.
func (w *ServerInterfaceWrapper) ClosePost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ClosePost(ctx, id)
	return err
}

// CreatePost converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePost(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePost(ctx)
	return err
}

// FindPostByUserID converts echo context to params.
func (w *ServerInterfaceWrapper) FindPostByUserID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "idUser" -------------
	var idUser string

	err = runtime.BindStyledParameterWithLocation("simple", false, "idUser", runtime.ParamLocationPath, ctx.Param("idUser"), &idUser)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idUser: %s", err))
	}

	// ------------- Path parameter "page" -------------
	var page int

	err = runtime.BindStyledParameterWithLocation("simple", false, "page", runtime.ParamLocationPath, ctx.Param("page"), &page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPostByUserID(ctx, idUser, page)
	return err
}

// DeletePost converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePost(ctx, id)
	return err
}

// FindPostByID converts echo context to params.
func (w *ServerInterfaceWrapper) FindPostByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPostByID(ctx, id)
	return err
}

// UpdatePost converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePost(ctx, id)
	return err
}

// GetAllPost converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllPost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "page" -------------
	var page int

	err = runtime.BindStyledParameterWithLocation("simple", false, "page", runtime.ParamLocationPath, ctx.Param("page"), &page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAllPost(ctx, page)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.PUT(baseURL+"/api/close/:id", wrapper.ClosePost)
	router.POST(baseURL+"/api/post", wrapper.CreatePost)
	router.GET(baseURL+"/api/post/user/:idUser/:page", wrapper.FindPostByUserID)
	router.DELETE(baseURL+"/api/post/:id", wrapper.DeletePost)
	router.GET(baseURL+"/api/post/:id", wrapper.FindPostByID)
	router.PUT(baseURL+"/api/post/:id", wrapper.UpdatePost)
	router.GET(baseURL+"/api/sort/new/:page", wrapper.GetAllPost)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYT2/bNhT/KgK3o2C5zU6+pc26ZcDWAEu3Q5cDazM2B1lSSTpFYAiwHWArlgJBd9kw",
	"oC2KATs7bty6dax+hcdvNDxStmJbjh0sQ5OtJ1sU9fj+/N7v/aQmKYf1KAxYoCQpNYks11idmr+3BaOK",
	"bYVS4RX1/bu7pHS/SSIRRkwozsyuDSbLgkeKhwFeVs5eEngJCZxAX7fgNXRhBAPoO5DAsf5FH0EPhtDH",
	"RX1UIC5R+xEjJSKV4EGVxC7Zoqq2WadVexBXrC5zjvgd3hiLLejCa2sP+rn20gUqBN039gUvsxyLfxkr",
	"3dUd3abVHDN/QFd3oA+vINGtxc9y5ec58Qy68AZ6Nmv6aFVnYpcI9rDBBauQ0v3UujtVpXHg1u+pNO/E",
	"O7FLPhciFF9ub2+hW9PVLoeVHGfNA46555LdUNSpIiXCA7V2M/OQB4pVmcCY60xKWl1oaHx7WXDpgePt",
	"6PrXPODLEPsNrbNcHJ1imt9DAkP9xICql1Zw+KEAGkq1WZk3ublxgSa6NJBfLlBdck8ysSi6i1ThO84e",
	"ydz+S2AIA/0z9HVbd6AHiQPvdQsS3YZTSHQH/0OvkIPRGaSlrrqTfjIYmhRo7EPWWXM9tQyUt/1Q5mX3",
	"N+jCO93Sh7qD7g9hkJPgKTg9CEOf0QAz85GbrxQ3nwP5ytWH/HkjxKL3TBtMwz92iWTlhuBq/1vUFxY0",
	"DxgVTKw3VC27ujMeHl99v01cq0YMqM3dzOuaUhGJ0TAPdsP5TNyNWLAecWetUHTgBPPo6LbBeg8Gug1d",
	"JwqlwrUuvNUd6DrrUXQv4A9NZmzZSbrk/NAoFtfKkok9XmYOdrJZYc761iZxyR4T0p56o1AsFLE+YcQC",
	"GnFSImtmySURVTUTtUcj7pUxX16TV2IzYhuGGpAOKPqPCLEpNayBDwtaZ4oJaZhj5WHA8T6eTFwSmKlH",
	"OJY0q7MSDZammaIPswN3BzfLKAykrdnNYtHKgECxwBJaFPm8bPz2fpSWaDJ7nwq2S0rkEy9TmV4qMT0T",
	"nKnhDIqfz/Obow90G95DXz+GEYI6gWP8M9mTFIgxtEsbvro0FzMllOfnC9NMA+xY/RiGhpX0YxjAMbyD",
	"boGcxb0p3FnE39/B5MpGvU7F/gzT6ycLSB4tGgBF6TgZ/85gJ1PutthMqlthZf/S8nLmgHiaOBBQ8Rxo",
	"buRw1QpV1m1I4A2cGKK9/hV+OY7GVtjCN8mdunPF9hqSCWQM5OXYa0a0ygx5VFkOAO7woILVubVvaHxj",
	"FQ6Znj8zEyiXSdD2hdjEndcgyL26ZSjrJ8xo7lGRfRtYelA2y/4pb00ETRiwVK8tp7KdOR2zCrllLx0H",
	"OLcnSL9Z/Cyna57qQysCZ6c6PjjShw70cNAtGAlXs4GyDvnVjOiRPljAgWmuHH6eXprum/GQrTCfKTbf",
	"Khtm/QoO2rzqv8iN+YmjDwxJDvVTGF17mvzTxgKD8wahu4z4ViO9/75wyuWWa00CaVAOr5hYctXzvahC",
	"r0pXf3j59VGz/0tU9XwS0WAV1S5DobyAPVom375gat33V0EvPIMETrFhHHzhNx9ajJYySsAx2qANiW7p",
	"Dgzsu7/ZgU6/deAYTlyzKVOjr7BS74w1o8wSONUH11WXTT4HX5Y204f/W232XLdTkIyM9jiaQRx07SmS",
	"ib0xWBvCTz/WyJLnNWuhVAidGLuBuGSPCk4f+BYK45s2sWkiiB+WqV9LWWcn/jsAAP//ZY6kFK8aAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
