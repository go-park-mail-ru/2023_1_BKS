// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Закрыть объявление.
	// (PUT /close/{id})
	ClosePost(ctx echo.Context, id string) error
	// Вернуть посты авторизированного пользователя.
	// (GET /post)
	GetPost(ctx echo.Context) error
	// Создать новое объявление.
	// (POST /post)
	CreatePost(ctx echo.Context) error
	// Удалить объявление.
	// (DELETE /post/{id})
	DeletePost(ctx echo.Context, id string) error
	// Вернуть объявление по id.
	// (GET /post/{id})
	FindPostByID(ctx echo.Context, id string) error
	// Обновить объявление.
	// (PUT /post/{id})
	UpdatePost(ctx echo.Context, id string) error
	// Основнвая страница
	// (GET /sort/new/{post})
	GetAllPost(ctx echo.Context, post string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ClosePost converts echo context to params.
func (w *ServerInterfaceWrapper) ClosePost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ClosePost(ctx, id)
	return err
}

// GetPost converts echo context to params.
func (w *ServerInterfaceWrapper) GetPost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPost(ctx)
	return err
}

// CreatePost converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePost(ctx)
	return err
}

// DeletePost converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePost(ctx, id)
	return err
}

// FindPostByID converts echo context to params.
func (w *ServerInterfaceWrapper) FindPostByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPostByID(ctx, id)
	return err
}

// UpdatePost converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePost(ctx, id)
	return err
}

// GetAllPost converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllPost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "post" -------------
	var post string

	err = runtime.BindStyledParameterWithLocation("simple", false, "post", runtime.ParamLocationPath, ctx.Param("post"), &post)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter post: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAllPost(ctx, post)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.PUT(baseURL+"/close/:id", wrapper.ClosePost)
	router.GET(baseURL+"/post", wrapper.GetPost)
	router.POST(baseURL+"/post", wrapper.CreatePost)
	router.DELETE(baseURL+"/post/:id", wrapper.DeletePost)
	router.GET(baseURL+"/post/:id", wrapper.FindPostByID)
	router.PUT(baseURL+"/post/:id", wrapper.UpdatePost)
	router.GET(baseURL+"/sort/new/:post", wrapper.GetAllPost)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYT08bRxT/KqtpjyuvE3ryjZT+4VCFA5xSDhN7gKnWu8PMmAqhlWwjtaggofTSXpIo",
	"qtTz4kJwMF6+wptvVM2bXbu219RKUhVaTrZ3Zt68936/93tvfUDqcVPEEYu0IrUDouo7rEnx6xdSxvLr",
	"9fU1+0PIWDCpOcOletxg9rPBVF1yoXkckZo74OGaT7Zi2aSa1AiP9NJj4hO9L5j7ybaZJIlPmkwpuj3X",
	"ULE8Oqq05NE2SRKfSLbb4pI1SO0ZyS8stm8mPvmK6bVYaWuZhuHTLVJ7Nh3C52GsSq6GXyCFK9M2x6YL",
	"mQcD6HuQwZn5yZxCDwZwAUPow0Vl7NbzOA4ZjWxEK3+1NWP6DWRwDhemDW8hdWZKbJvTymzIPllt0m32",
	"DVWK76Hbn0q2RWrkk2CMX5CDF0zsTXyyJnm9LNbf8cZ0cSfWuQ7LDL2EFC6h56Iyp4sb3FBMrjY+nsUp",
	"auTmC8cnASry4udcmMrxZrJZknauWRP5E0eslFd4oCSgX+ESY2hDCm8LFr1nWO4O52C+k0pJ9xHrB94/",
	"8P5DeW/t8WgrnnXwqWDRsuDeUqXqwTkMzKlnOohtD/qmA6knYqXtsxTemS6k3rIQGxHfRaddGkn+yPu2",
	"Va0u1RWTe7zOPMtcfMK85bVV4pM9JpW79VGlWqnavMWCRVRwUiNL+MgnguodJHZQt9EEB7yRYMNqYRlY",
	"6lPru822CxgrxB6UtMk0kwqrZDLM1ZW5med23d5KfBLRJvY0m+px/rVsMT/vpNaHaaw27WYl4ki5knxc",
	"rbqmGmkWueIVIuR19Dv4TrmiGtu7rQQwOMRvilivZmvZM4emAzdwYY5gaIs+gzP7ZbQnqxA0tEVbof5o",
	"Lo7nijI/X5s2ZNC3ammOYIBVao6gD2dwBWkFqa5azSaV+1OyZU7mKJY9EohcF7dZCS+KeeEDgSlpDrcl",
	"ori1RMcXBBBuIIOBOTQ/3he8fkatGJpDh9cNZKZjuubYgxR6tvWYNhrro1mng5aSf1h+umhPsJP2IDVd",
	"uLAKhFEX+E4VvGRUsxG2uy2m9JO4sf8P1Ntk/SczVHpUovYLFKXpQAaXcI6ZuAcAvyncdQA7OclKO/5E",
	"bY6Eu8FCptkslCv4/A6K92clwL4uZeqJZw4RyYF5AcO7j+Vvzlno3yaufrmkfsmjhgXryf7qyn+2244U",
	"/P+i19mcoDzecCpcNnVtiAa9K5X7b3aAhynvfVn4auRy/+/mPBVLHUTs++DAdpXktpFvOQwXISW8hAyu",
	"bR2M5hXrb8+63LXt2bRNd2ZgeefBGZz7uGncBnGMufKcDTxxbQ7n0FuMp5Z7pnT2vXVC6cwxcqy8V74w",
	"x+7vhhubENOBa0xsG20N7WjYs6+Yc5ThzlPXdHL0hzgJnCL4+DeQjeAHSN0t9i244F9LhqRGdrQWqhYE",
	"Bzux0pYTSWBffX2yRyWnz0MHcrHoEpsngoRxnYY7OWCbyZ8BAAD//z9EZiXmFQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
