// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Вернуть объявления из корзины.
	// (GET /api/cart)
	GetCart(ctx echo.Context) error
	// Удалить из корзины товар.
	// (DELETE /api/cart/{id})
	RemoveCart(ctx echo.Context, id string) error
	// Добавить в корзину.
	// (POST /api/cart/{id})
	AddCart(ctx echo.Context, id string) error
	// Закрыть объявление.
	// (PUT /api/close/{userId}/{id})
	ClosePost(ctx echo.Context, userId string, id string) error
	// Создать новое объявление.
	// (POST /api/post)
	CreatePost(ctx echo.Context) error
	// Вернуть закрытые объявления по id пользователя.
	// (GET /api/post/close/user/{idUser}/{page})
	FindClosePostByUserID(ctx echo.Context, idUser string, page int) error
	// Вернуть открытые объявления по id пользователя.
	// (GET /api/post/open/user/{idUser}/{page})
	FindOpenPostByUserID(ctx echo.Context, idUser string, page int) error
	// Удалить объявление.
	// (DELETE /api/post/{id})
	DeletePost(ctx echo.Context, id string) error
	// Вернуть объявление по id.
	// (GET /api/post/{id})
	FindPostByID(ctx echo.Context, id string) error
	// Обновить объявление.
	// (PUT /api/post/{id})
	UpdatePost(ctx echo.Context, id string) error
	// Вернуть объявления по тегу.
	// (GET /api/post/{tag}/{page})
	FindPostByTag(ctx echo.Context, tag string, page int) error
	// Основнвая страница
	// (GET /api/sort/new/{page})
	GetAllPost(ctx echo.Context, page int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCart converts echo context to params.
func (w *ServerInterfaceWrapper) GetCart(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCart(ctx)
	return err
}

// RemoveCart converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveCart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RemoveCart(ctx, id)
	return err
}

// AddCart converts echo context to params.
func (w *ServerInterfaceWrapper) AddCart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddCart(ctx, id)
	return err
}

// ClosePost converts echo context to params.
func (w *ServerInterfaceWrapper) ClosePost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ClosePost(ctx, userId, id)
	return err
}

// CreatePost converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePost(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePost(ctx)
	return err
}

// FindClosePostByUserID converts echo context to params.
func (w *ServerInterfaceWrapper) FindClosePostByUserID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "idUser" -------------
	var idUser string

	err = runtime.BindStyledParameterWithLocation("simple", false, "idUser", runtime.ParamLocationPath, ctx.Param("idUser"), &idUser)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idUser: %s", err))
	}

	// ------------- Path parameter "page" -------------
	var page int

	err = runtime.BindStyledParameterWithLocation("simple", false, "page", runtime.ParamLocationPath, ctx.Param("page"), &page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindClosePostByUserID(ctx, idUser, page)
	return err
}

// FindOpenPostByUserID converts echo context to params.
func (w *ServerInterfaceWrapper) FindOpenPostByUserID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "idUser" -------------
	var idUser string

	err = runtime.BindStyledParameterWithLocation("simple", false, "idUser", runtime.ParamLocationPath, ctx.Param("idUser"), &idUser)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idUser: %s", err))
	}

	// ------------- Path parameter "page" -------------
	var page int

	err = runtime.BindStyledParameterWithLocation("simple", false, "page", runtime.ParamLocationPath, ctx.Param("page"), &page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindOpenPostByUserID(ctx, idUser, page)
	return err
}

// DeletePost converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePost(ctx, id)
	return err
}

// FindPostByID converts echo context to params.
func (w *ServerInterfaceWrapper) FindPostByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPostByID(ctx, id)
	return err
}

// UpdatePost converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePost(ctx, id)
	return err
}

// FindPostByTag converts echo context to params.
func (w *ServerInterfaceWrapper) FindPostByTag(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tag" -------------
	var tag string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tag", runtime.ParamLocationPath, ctx.Param("tag"), &tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Path parameter "page" -------------
	var page int

	err = runtime.BindStyledParameterWithLocation("simple", false, "page", runtime.ParamLocationPath, ctx.Param("page"), &page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPostByTag(ctx, tag, page)
	return err
}

// GetAllPost converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllPost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "page" -------------
	var page int

	err = runtime.BindStyledParameterWithLocation("simple", false, "page", runtime.ParamLocationPath, ctx.Param("page"), &page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAllPost(ctx, page)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/cart", wrapper.GetCart)
	router.DELETE(baseURL+"/api/cart/:id", wrapper.RemoveCart)
	router.POST(baseURL+"/api/cart/:id", wrapper.AddCart)
	router.PUT(baseURL+"/api/close/:userId/:id", wrapper.ClosePost)
	router.POST(baseURL+"/api/post", wrapper.CreatePost)
	router.GET(baseURL+"/api/post/close/user/:idUser/:page", wrapper.FindClosePostByUserID)
	router.GET(baseURL+"/api/post/open/user/:idUser/:page", wrapper.FindOpenPostByUserID)
	router.DELETE(baseURL+"/api/post/:id", wrapper.DeletePost)
	router.GET(baseURL+"/api/post/:id", wrapper.FindPostByID)
	router.PUT(baseURL+"/api/post/:id", wrapper.UpdatePost)
	router.GET(baseURL+"/api/post/:tag/:page", wrapper.FindPostByTag)
	router.GET(baseURL+"/api/sort/new/:page", wrapper.GetAllPost)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZT2/bNhT/KgK3o2C5zU6+pc3aZcDQYEu3Q5cDazE2B1lSSTpFYAiwHaArlgJBhwEb",
	"BrRFN2Bn140bN2nUr/D4jQaS8r+Yil0kXZPMJ1uURL73fr/343tUA5WjWhyFJBQclRqIl6ukhvXfm4xg",
	"QdYiLtQVDoI7m6h0r4FiFsWECUr0UyuElxmNBY1CdemPXyJ4CSnsQ0824Q104Bj60HMghVfyF7kHXTiC",
	"nhqUewXkIrEdE1RCXDAaVlDiojUsqqs1XDELUUFq3LLEH3CgZ2xCB96Y+aBnnS8bwIzhbT0/o2VimfEf",
	"PUtnfkPXccUyzZ/QkW3owWtIZTP/XSoCmxHPoAMH0DVRk3vzGpO4iJEHdcqIj0r3stndCZQGjhu7J8K8",
	"kWwkLvqSsYh9tb6+psyaRLsc+RZj9QuOvueizYjVsEAlREOxdH1kIQ0FqRCmfK4RznEld6LB7VnOZQsO",
	"Hlemf0NDOouxH51WERer/vSUqysfQP1zo+b50stFdzlhed69hxSO5BMduW7G/qOceb6n5CG3Zk0KR9CX",
	"P0NPtmQbupA68F42IZUteAepbKv/0C1YmHWCH5mp7jALMmQGi48SYSoFZnHoZhBxW1h/hw4cyqbclW1l",
	"9xH0LZGd4NH9KAoIDlVIFlJ6oaT0FK77F5/rpym+Ye9YGkzSP3ERJ+U6o2L7O1UOGNLcJ5gRtlwX1dHV",
	"rYHWf/3DOnJN8aBJre+OrK4KEaNETUzDzWg6EndiEi7H1FkqFB3YV3F0ZEtzvQt92YKOE0dcqLEOvJVt",
	"6DjLcXw3pA90ZAzsKBtyfqwXi0tlTtgWLRNHZbIeIc7y2ipy0RZh3Kx6rVAsFBU+UUxCHFNUQkt6yEUx",
	"FlXttYdj6pUx02pQIfpHCQFWlituoNtE3FT3FR48jkJuwnW9WDQbZihIaLQkjgNa1i96P3GT46bcslCj",
	"q/zPZeowgaOQWPWJnlmhT/CL+pkyTma+euyE5c+nTR6su6OYDseQFpB+bxPXA/FBUfqckU1UQp95o6rV",
	"y0pWb1S22Mx6oVOprzyXj+FIa5J8DH14BYfQKaBx1uuAjvP93kay4SJer9Uw21az/arJeSx3ZFs+scLk",
	"qLUcONSKdQB9OJa7ZpUhpbwG9RODU0AEmabWt6QWbZGMXTFmuEYEYVybN6VIasfRmDaVOyrTUEnzGLko",
	"xDotqY/GURWsTtyx4J5kwIad0rPwhp4jd2AfOtnAVcD778yfvsF7Gtqx8Gtn46yAmAR02fcvIZqwrwgO",
	"neHgVUD0t6FPGabdSUR3xpNV7Zdeo6732GSYtnHdArHeW3X5OAvk/Hbg7GC7OeJvl37LevVBPXFmgp0L",
	"M3RA59pttPrIFryHnnysmKqjrP4Mn7n85B1rM6zbj6rah+wdSJFdksZOeQzYhIsbkb99bnEZWyCZrCoU",
	"oZIp0lybe4+ZQFm2IIUDLdNXAeGXA28Mwoa+qbUknAI70yuVwkqrVGuQeI0YV0iSW8XeoqE/lK4b27qd",
	"WJlHwiYrytnCYuw5m5jBS9UDqAIM+vJR7gYZm0OkmQuNeqqzSpilLp+taudbVV8vfmFJoKdy1xxGnOwu",
	"9XYud51TG46LmUu51fjBmDru5jilg+fQ0xr5yZxSPeKHp5RqbBcZtcioS55RqWyff0bN6n5X9PgnL6Wn",
	"GWyjwwurz0+GnbB8CsdXrQu2VyJuvhoaJZxPBf9DPD9Rm3JZDsXmP/XKnHKob85AbP3x3djHFyWrP32z",
	"s+iQP5JUPR961J+3R/YaAlfmquqMjplvKadSGP6CHrzOYazQ7y+KNm/40X5RuH10iR7UaeZz6sQpJ4+Y",
	"8ELycFYG3CZiOQjmUXB4Bim8UxY5sqVjbD7BPtJR1mWlbEEqm7INffOpUz+hEvetA69g39UPjc4/Xiu1",
	"OtSzaean8E75sOC95r3+wvT/5P1z2cpIcqzr770TjIOOWYUTtjUga50F2bdpXvK8RjXiQlEnUdmAXLSF",
	"GcX3A0OFwU0T2CwQKIjKOKhmO+9G8m8AAAD//2utX/lNJwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
