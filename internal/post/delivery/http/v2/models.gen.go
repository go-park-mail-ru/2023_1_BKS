// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v2

import (
	"encoding/json"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// ErrorHTTP defines model for ErrorHTTP.
type ErrorHTTP struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// GetPost defines model for GetPost.
type GetPost struct {
	// Close Закрыто ли объявление.
	Close bool `json:"Close"`

	// Description Содержание объявления.
	Description  string       `json:"Description"`
	ImageMassive ImageMassive `json:"ImageMassive"`

	// Price Цена объявления.
	Price string `json:"Price"`

	// Title Названия объявления.
	Title string `json:"Title"`

	// UserId Названия объявления.
	UserId string `json:"UserId"`
}

// ImageMassive defines model for ImageMassive.
type ImageMassive = []ImageMassive_Item

// ImageMassive0 defines model for .
type ImageMassive0 struct {
	// Image Изображение объявления.
	Image string `json:"Image"`
}

// ImageMassive_Item defines model for ImageMassive.Item.
type ImageMassive_Item struct {
	union json.RawMessage
}

// Post defines model for Post.
type Post struct {
	// Close Закрыто ли объявление.
	Close bool `json:"Close"`

	// Description Содержание объявления.
	Description  string       `json:"Description"`
	ImageMassive ImageMassive `json:"ImageMassive"`

	// Price Цена объявления.
	Price string `json:"Price"`

	// Title Названия объявления.
	Title string `json:"Title"`

	// UserId Названия объявления.
	UserId string `json:"UserId"`
}

// CreatePostJSONRequestBody defines body for CreatePost for application/json ContentType.
type CreatePostJSONRequestBody = Post

// UpdatePostJSONRequestBody defines body for UpdatePost for application/json ContentType.
type UpdatePostJSONRequestBody = Post

// AsImageMassive0 returns the union data inside the ImageMassive_Item as a ImageMassive0
func (t ImageMassive_Item) AsImageMassive0() (ImageMassive0, error) {
	var body ImageMassive0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromImageMassive0 overwrites any union data inside the ImageMassive_Item as the provided ImageMassive0
func (t *ImageMassive_Item) FromImageMassive0(v ImageMassive0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeImageMassive0 performs a merge with any union data inside the ImageMassive_Item, using the provided ImageMassive0
func (t *ImageMassive_Item) MergeImageMassive0(v ImageMassive0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ImageMassive_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ImageMassive_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
