// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v2

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// CreatePost defines model for CreatePost.
type CreatePost struct {
	// Category Категория.
	Category string `json:"Category"`

	// Description Содержание объявления.
	Description string   `json:"Description"`
	PathImages  []string `json:"PathImages"`

	// Price Цена объявления.
	Price string `json:"Price"`

	// Title Названия объявления.
	Title string `json:"Title"`
}

// EditPost defines model for EditPost.
type EditPost struct {
	// Category Категория.
	Category *string `json:"Category,omitempty"`

	// Description Содержание объявления.
	Description *string   `json:"Description,omitempty"`
	PathImages  *[]string `json:"PathImages,omitempty"`

	// Price Цена объявления.
	Price *string `json:"Price,omitempty"`

	// Status Закрыто ли объявление.
	Status *bool `json:"Status,omitempty"`

	// Title Названия объявления.
	Title *string `json:"Title,omitempty"`
}

// ErrorHTTP defines model for ErrorHTTP.
type ErrorHTTP struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// FullPost defines model for FullPost.
type FullPost struct {
	// Category Категория.
	Category string `json:"Category"`

	// Description Содержание объявления.
	Description string   `json:"Description"`
	PathImages  []string `json:"PathImages"`

	// Price Цена объявления.
	Price string `json:"Price"`

	// Status Закрыто ли объявление.
	Status bool `json:"Status"`

	// Title Названия объявления.
	Title string `json:"Title"`

	// UserId Id пользователя.
	UserId string `json:"UserId"`

	// Views Количество просмотров.
	Views int `json:"Views"`
}

// MiniPost defines model for MiniPost.
type MiniPost struct {
	PathImages []string `json:"PathImages"`

	// PostId ID объявления.
	PostId string `json:"PostId"`

	// Price Цена объявления.
	Price string `json:"Price"`

	// Title Названия объявления.
	Title string `json:"Title"`

	// UserId ID пользователя.
	UserId string `json:"UserId"`

	// Views Количество просмотров.
	Views int `json:"Views"`
}

// GetMiniPostParams defines parameters for GetMiniPost.
type GetMiniPostParams struct {
	// Offset Количество объектов пропущеных в результирующей выборке.
	Offset int `form:"offset" json:"offset"`

	// Limit Количество возврощаемых объектов
	Limit int `form:"limit" json:"limit"`

	// Status Статус.
	Status *bool `form:"status,omitempty" json:"status,omitempty"`

	// Sort Метод сортировки.
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// User ID пользоввателя.
	User *string `form:"user,omitempty" json:"user,omitempty"`

	// Tag Тег.
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`
}

// SearchParams defines parameters for Search.
type SearchParams struct {
	// Query Запрос
	Query string `form:"query" json:"query"`
}

// CreatePostJSONRequestBody defines body for CreatePost for application/json ContentType.
type CreatePostJSONRequestBody = CreatePost

// UpdatePostJSONRequestBody defines body for UpdatePost for application/json ContentType.
type UpdatePostJSONRequestBody = EditPost
